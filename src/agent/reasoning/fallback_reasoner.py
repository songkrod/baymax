# ‚úÖ fallback_reasoner.py

from services.llm.agent import llm
from agent.meta.meta_skill_handler import handle_missing_skill
from utils.logger import logger
from skills.core.speech.speaker import say

def handle_unknown_intent(user_input: str, user_id: str, context: str = ""):
    """
    ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Baymax ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‚Üí ‡πÉ‡∏ä‡πâ GPT ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏à‡∏ï‡∏ô‡∏≤ + ‡πÄ‡∏™‡∏ô‡∏≠ skill ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    """
    say("‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£")
    logger.warning(f"[‚ùì] ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {user_input}")

    # ‡πÉ‡∏ä‡πâ meta skill reasoning ‡πÄ‡∏™‡∏ô‡∏≠ skill ‡πÉ‡∏´‡∏°‡πà
    handle_missing_skill(user_input=user_input, context=context, user_id=user_id)


def fallback_response(user_input: str, user_id: str, context: str = ""):
    """
    ‡πÉ‡∏ä‡πâ fallback dialog ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
    """
    intent = llm.classify_intent(user_input)
    logger.info(f"[ü§î] Fallback ‡∏ï‡∏£‡∏ß‡∏à intent ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤: {intent}")

    if intent in ("clarification", "unknown"):
        handle_unknown_intent(user_input, user_id, context)
    else:
        say("‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö")
