# src/agent/brain/processor.py

from agent.memory_access.memory_manager import MemoryManager
from agent.reasoning.voice_identity import VoiceIdentifier
from agent.retrievers.retriever import store_memory, retrieve_context
from services.asr.agent import asr
from services.llm.agent import llm
from utils.logger import logger

memory = MemoryManager()
voice_identifier = VoiceIdentifier()

async def process_audio(audio_bytes: bytes) -> tuple[str, str]:
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ ‚Üí ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å GPT
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö, user_id)
    """
    try:
        logger.info("[üîç] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")

        # üîé ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î
        user_id = voice_identifier.recognize_speaker(audio_bytes)
        logger.info(f"[üß†] ‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î: {user_id}")

        # üìù ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        text = await asr.transcribe(audio_bytes)
        text = text.strip()

        if not text:
            logger.warning("[‚ö†Ô∏è] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
            return "", user_id

        logger.debug(f"[üëÇ] ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id} ‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: {text}")

        # üíæ ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        store_memory(user_id=user_id, text=text, source="voice")

        # üß† ‡∏î‡∏∂‡∏á context ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        context_items = retrieve_context(user_id=user_id, query=text, top_k=3)
        context = "\n".join([item.text for item in context_items])

        # üí¨ ‡πÉ‡∏ä‡πâ GPT ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        reply = llm.respond(message=text, memory=context)

        logger.info(f"[üí°] ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å GPT: {reply}")
        return reply, user_id

    except Exception as e:
        logger.error(f"[‚ùå] process_audio error: {e}")
        return "", "unknown"
