from skills.core.listen.voice_embedder import extract_embedding
from agent.memory_access.memory_manager import MemoryManager
from agent.reasoning.voice_identity import VoiceIdentifier
from services.asr import transcribe_audio
from utils.logger import logger

memory = MemoryManager()
voice_identifier = VoiceIdentifier()

async def process_audio(audio_bytes: bytes) -> tuple[str, str]:
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‚Üí ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏•‡∏∞ user_id ‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î
    """
    try:
        logger.info("[üîç] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
        
        # üîé ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î
        user_id = voice_identifier.recognize_speaker(audio_bytes)
        logger.info(f"[üß†] ‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î: {user_id}")

        # üìù ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        text = await transcribe_audio(audio_bytes)
        text = text.strip()

        if not text:
            logger.warning("[‚ö†Ô∏è] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
            return "", user_id

        logger.debug(f"[üëÇ] ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id} ‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: {text}")
        return text, user_id

    except Exception as e:
        logger.error(f"[‚ùå] process_audio error: {e}")
        return "", "unknown"