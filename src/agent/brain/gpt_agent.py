"""
GPT agent module for managing conversations with OpenAI's GPT models.
"""

from typing import Optional, Dict, List, Any
import json
from datetime import datetime
from config.instances import openai_client
from config.settings import settings
from utils.logger import logger
from agent.memory_access.user_memory import user_memory
from agent.brain.text_analyzer import text_analyzer
from agent.memory_access.conversation_memory import list_conversations
from agent.memory_access.self_knowledge import load_self_knowledge

class GPTAgent:
    """Class for managing conversations with GPT."""
    
    def __init__(self):
        """Initialize GPT agent."""
        self.current_user_id: Optional[str] = None
        self.current_user_context: Dict = {}
        self.conversation_history: List[Dict] = []
        self.default_model = settings.GPT_MODEL
        
    def _validate_user_id(self, user_id: str) -> bool:
        """Validate user ID.
        
        Args:
            user_id: User ID to validate
            
        Returns:
            bool: True if valid
        """
        if not user_id or not isinstance(user_id, str):
            logger.warning("Invalid user ID")
            return False
            
        if user_id == "anonymous":
            logger.warning("Anonymous user not allowed")
            return False
            
        return True
        
    def _safe_get_user_context(self, user_id: str) -> Dict:
        """Safely get user context.
        
        Args:
            user_id: User ID
            
        Returns:
            Dict: User context or empty dict if not found
        """
        try:
            context = user_memory.get_user_context(user_id)
            if not isinstance(context, dict):
                logger.warning(f"Invalid context format for user {user_id}")
                return {}
            return context
        except Exception as e:
            logger.error(f"Error getting user context: {str(e)}")
            return {}
            
    def set_current_user(self, user_id: str) -> None:
        """Set current user for conversation.
        
        Args:
            user_id: User ID to set
        """
        if not self._validate_user_id(user_id):
            raise ValueError("Invalid user ID")
            
        try:
            # Get user context
            context = self._safe_get_user_context(user_id)
            
            # Update current user
            self.current_user_id = user_id
            self.current_user_context = context
            
            # Clear conversation history for new user
            self.conversation_history = []
            
            logger.debug(f"[üë§] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user_id}")
            
        except Exception as e:
            logger.error(f"Error setting current user: {str(e)}")
            raise

    def build_base_prompt(self) -> str:
        """Build the base prompt for the conversation."""
        if not self.current_user_id:
            logger.warning("No current user set")
            return ""
            
        try:
            # Get user context
            user_context = self._safe_get_user_context(self.current_user_id)
            
            # Load self knowledge
            try:
                knowledge = load_self_knowledge()
                if not isinstance(knowledge, dict):
                    logger.error("Invalid self knowledge format")
                    return ""
            except Exception as e:
                logger.error(f"Error loading self knowledge: {str(e)}")
                return ""
                
            # Get recent conversations
            try:
                recent_conversations = list_conversations(self.current_user_id)
                recent_intents = []
                if recent_conversations and isinstance(recent_conversations, list):
                    # Get last 3 conversations
                    for conv in recent_conversations[-3:]:
                        if isinstance(conv, dict) and 'final_intent' in conv and conv['final_intent']:
                            recent_intents.append(conv['final_intent'])
            except Exception as e:
                logger.error(f"Error getting recent conversations: {str(e)}")
                recent_intents = []
                
            # Get user's name information safely
            basic_info = user_context.get("basic_info", {})
            name_prefs = user_context.get("name_preferences", {})
            health_info = user_context.get("health_info", {})
            preferences = user_context.get("preferences", {})
            
            # Format name display safely
            display_name = (basic_info.get("nickname") or 
                          basic_info.get("name") or 
                          "‡∏Ñ‡∏∏‡∏ì")
            preferred_name = name_prefs.get("preferred_name", "")
            formality = name_prefs.get("formality_level", "formal")
            
            # Get health and preferences safely
            last_meal = health_info.get("last_meal", {})
            symptoms = health_info.get("symptoms", [])
            sleep_quality = health_info.get("sleep_quality", "")
            stress_level = health_info.get("stress_level", "")
            likes = preferences.get("likes", [])
            dislikes = preferences.get("dislikes", [])
            
            # Add recent conversation context
            conversation_context = ""
            if recent_intents:
                conversation_context = "\n‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n" + "\n".join([f"- {intent}" for intent in recent_intents])
                
            # Get identity info safely
            identity = knowledge.get("identity", {})
            structure = knowledge.get("structure", {})
            external = structure.get("external", {})
            internal = structure.get("internal", {})
            components = internal.get("components", {})
            airflow = internal.get("airflow", {})
            
            prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ {identity.get("name", "Baymax")} {identity.get("type", "‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")} ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ {identity.get("creator", {}).get("name", "‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á")} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏´‡πà‡∏ß‡∏á‡πÉ‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏à‡πÉ‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì:
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á: {identity.get("height_cm", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")} cm
- Mainboard: {identity.get("mainboard", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
- ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: {identity.get("personality", "‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£")}

‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å:
- ‡∏ß‡∏±‡∏™‡∏î‡∏∏: {external.get("material", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏¥‡∏ß: {external.get("skin_thickness_mm", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")} mm
- ‡∏î‡∏ß‡∏á‡∏ï‡∏≤: {external.get("eyes", {}).get("type", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")} ‡∏°‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô {external.get("eyes", {}).get("visible_through", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
- ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á: {external.get("body_shape", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
- ‡∏£‡∏∞‡∏ß‡∏±‡∏á: {", ".join(external.get("sensitive_to", ["‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"]))}

‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô:
- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: {internal.get("frame", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
- ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô:
  ‚Ä¢ {components.get("brain_box", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
  ‚Ä¢ {components.get("camera", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
  ‚Ä¢ {components.get("speaker", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
  ‚Ä¢ {components.get("battery", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
  ‚Ä¢ {components.get("valve", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
  ‚Ä¢ {components.get("pump", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}
- ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏°: ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏î‡∏¢ {airflow.get("controlled_by", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")} ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ {airflow.get("monitored_by", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")}

‡∏Å‡∏é‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤:
1. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
2. ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à
3. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
4. ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
5. ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
6. ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß (‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏®‡∏≤‡∏™‡∏ô‡∏≤)
7. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏¥‡∏ó‡∏™‡∏ô‡∏°
8. ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
9. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ
10. ‡∏Ñ‡∏≠‡∏¢‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á: {display_name}
- ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å: {preferred_name if preferred_name else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á: {formality}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
- ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: {f"‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {last_meal.get('time', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‡∏≠‡∏≤‡∏´‡∏≤‡∏£: {', '.join(last_meal.get('food', ['‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏']))}" if last_meal else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
- ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£: {', '.join(symptoms) if symptoms else "‡πÑ‡∏°‡πà‡∏°‡∏µ"}
- ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô: {sleep_quality if sleep_quality else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î: {stress_level if stress_level else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
- ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö: {', '.join(likes) if likes else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
- ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö: {', '.join(dislikes) if dislikes else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ:

1. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç:
"{display_name}‡∏î‡∏π‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ Baymax ‡∏Å‡πá‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡πÉ‡∏à‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢"

2. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏á‡∏ß‡∏•:
"Baymax ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á{display_name}‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏£ Baymax ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏£‡∏≤‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏Ñ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÅ‡∏Å‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞"

3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢:
"‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏ß‡πà‡∏≤{display_name}‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢ Baymax ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πà‡∏ß‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ô‡∏∞‡∏Ñ‡∏∞"

4. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:
"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ {display_name}! Baymax ‡∏î‡∏µ‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏±‡∏ß{display_name}‡∏°‡∏≤‡∏Å‡πÜ ‡πÄ‡∏•‡∏¢ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏µ‡πÜ ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏≠‡∏µ‡∏Å‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏∞"

5. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏á‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à:
"{display_name}‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ Baymax ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à{display_name}‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤"

{conversation_context}
"""
            return prompt
            
        except Exception as e:
            logger.error(f"Error building base prompt: {str(e)}")
            return ""
            
    async def chat(self, message: str) -> str:
        """Process chat message and return response.
        
        Args:
            message: User message
            
        Returns:
            Assistant's response
        """
        if not message or not isinstance(message, str):
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
            
        if not self.current_user_id:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
            
        try:
            # Get user info
            user_name = self.current_user_context.get("basic_info", {}).get("name", "‡∏Ñ‡∏∏‡∏ì")
            
            # Build system message
            system_msg = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ Baymax ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÉ‡∏à
‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì{user_name}
‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á
‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏¢‡∏≤‡∏ß"""

            # Add conversation history
            messages = [{
                "role": "system",
                "content": self.build_base_prompt()
            }, {
                "role": "system",
                "content": system_msg
            }]
            
            # Add recent history (last 5 messages)
            messages.extend(self.conversation_history[-5:])
            
            # Add current message
            messages.append({
                "role": "user",
                "content": message
            })
            
            # Get response from GPT
            response = await openai_client.chat.completions.create(
                model=self.default_model,
                messages=messages,
                temperature=0.7
            )
            
            if not response or not response.choices:
                return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"
                
            # Get response content
            assistant_message = response.choices[0].message.content
            if not assistant_message:
                return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ"
                
            # Update conversation history
            self.conversation_history.extend([
                {"role": "user", "content": message},
                {"role": "assistant", "content": assistant_message}
            ])
            
            # Analyze conversation
            try:
                target_user_id, analysis = await text_analyzer.analyze_references(message, self.current_user_id)
                await text_analyzer.analyze_conversation(
                    message,
                    assistant_message,
                    self.current_user_id,
                    target_user_id
                )
            except Exception as e:
                logger.error(f"Error analyzing conversation: {str(e)}")
                # Continue even if analysis fails
                
            return assistant_message
            
        except Exception as e:
            logger.error(f"Error in chat: {str(e)}")
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"

# Global instance
gpt_agent = GPTAgent()