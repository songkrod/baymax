# src/agent/core/agent.py

from config.settings import settings
from skills.core.listen.listener import record_audio_raw
from skills.core.speech.speaker import say
from utils.logger import logger

from agent.brain.processor import process_audio
from agent.brain.interpreter import interpret
from agent.reasoning.name_learning import detect_and_learn_name
from agent.memory_access.memory_manager import MemoryManager
from services.llm.agent import llm
from agent.memory_access.self_knowledge_loader import preload_self_knowledge

memory = MemoryManager()
preload_self_knowledge()

async def wait_for_wake_word():
    say(f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ {settings.ROBOT_NAME} ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")
    logger.info("[üëã] ‡∏ü‡∏±‡∏á‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢...")

    try:
        while True:
            audio = await record_audio_raw()
            if not audio:
                continue

            text, user_id = await process_audio(audio)
            if not text:
                continue

            result = interpret(text, user_id)

            # ‡∏ï‡∏£‡∏ß‡∏à intent
            if result["intent"] in ("call_robot", "maybe_call_robot"):
                await detect_and_learn_name(text, user_id)

                profile = memory.user.get_user_profile(user_id) or {}
                name = profile.get("basic_info", {}).get("name", "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô")
                say(f"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì{name} ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
                return True

    except Exception as e:
        logger.error(f"[‚ùå] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏õ‡∏•‡∏∏‡∏Å: {str(e)}")
        return False


async def wait_for_command():
    say(f"‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö")
    logger.info("ü§ñ ‡∏´‡∏∏‡πà‡∏ô‡∏ï‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")

    while True:
        audio = await record_audio_raw()
        if not audio:
            continue

        reply, user_id = await process_audio(audio)
        if not reply:
            continue

        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå intent ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ GPT
        intent = llm.classify_intent(reply)
        logger.info(f"[üéØ] Intent ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {intent}")

        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á branching ‡∏ï‡∏≤‡∏° intent
        if intent == "ask_time":
            from datetime import datetime
            now = datetime.now().strftime("%H:%M")
            say(f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {now} ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö")
        elif intent == "rest":
            say("‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏û‡∏±‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ô‡∏∞")
            break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        else:
            # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏≤‡∏Å GPT
            say(reply)


async def run():
    logger.info("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")

    wake = False

    while True:
        if not wake:
            wake = await wait_for_wake_word()
        else:
            await wait_for_command()
